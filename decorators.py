import threading
import time
from datetime import datetime
from functools import wraps
from itertools import count
from random import randint
from typing import Callable


def log_call(func):
    name = func.__name__

    @wraps(func)  # –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    def wrapper(*args, **kwargs):
        print(f'üîî –í—ã–∑–æ–≤: {name}')
        result = func(*args, **kwargs)
        print(f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {name}')
        return result

    return wrapper


@log_call
def greet(name):
    print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")


greet("–ê–Ω—è")

print(greet.__name__)  # greet

# _____________________________________________________
print('-------------------------------------------------------')


def measure_time(func):
    def wrapper(*args, **kwargs):
        start = datetime.now()
        result = func(*args, **kwargs)
        end = datetime.now()
        print(f"üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__}: {(end - start).total_seconds()} —Å–µ–∫")
        return result

    return wrapper


@measure_time
def slow_add(a, b):
    time.sleep(0.5)
    return a + b


slow_add(1, 2)

# _____________________________________________________
print('-------------------------------------------------------')


def repeat(n):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            count1 = 0
            result = None
            while count1 < n:
                count1 = count1 + 1
                result = func(*args, **kwargs)
            return result

        return wrapper

    return decorator


@repeat(3)
def greet(name):
    print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
    return f"Hello {name}"


greet("–ê–Ω—è")

# _____________________________________________________
print('-------------------------------------------------------')

current_user = {"name": "–ê–Ω—è", "role": "admin"}


def require_role(role):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if current_user['role'] == role:
                result = func(*args, **kwargs)
                return result
            else:
                print('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å admin')

        return wrapper

    return decorator


@require_role("admin")
def delete_all():
    print("üî• –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!")


delete_all()

# _____________________________________________________
print('-------------------------------------------------------')


def cache(func):
    cache_dict = {}

    @wraps(func)
    def wrapper(*args, **kwargs):
        key = (args, frozenset(kwargs.items()))  # —Ç—É—Ç –º–∞–≥–∏—è –¥–ª—è —Ö—ç—à–∞
        if key in cache_dict:  # —Ç—É—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞

            print('‚ö° –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∏–∑ –∫—ç—à–∞')
            return cache_dict[key]
        else:
            result = func(*args, **kwargs)
            cache_dict[key] = result
            return result

    return wrapper


@cache
def slow_square(x):
    print(f"–í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç {x}")
    time.sleep(1)  # –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é —Ä–∞–±–æ—Ç—É
    return x * x


print(slow_square(3))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç
print(slow_square(3))  # –±–µ—Ä—ë—Ç –∏–∑ –∫–µ—à–∞

# _____________________________________________________
print('-------------------------------------------------------')

counter = {"failures": 0}


def retry(n):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            count1 = 0
            result = None
            for attempt in range(n):
                try:
                    result = func(*args, **kwargs)
                    return result
                except ValueError:
                    if attempt == n - 1:
                        raise  # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑

            return result

        return wrapper

    return decorator


@retry(3)
def flaky():
    if counter["failures"] < 2:
        counter["failures"] += 1
        raise ValueError("–ü–∞–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ")
    return "üéâ –£—Å–ø–µ—Ö!"


print(flaky())

# _____________________________________________________
print('-------------------------------------------------------')


import threading
import time
from functools import wraps

def timeout(seconds):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result_container = {}
            exception_container = {}

            def target():
                try:
                    result_container["result"] = func(*args, **kwargs)
                except Exception as e:
                    exception_container["error"] = e

            thread = threading.Thread(target=target)
            thread.start()
            thread.join(seconds)

            if thread.is_alive():
                raise TimeoutError(f"–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤ {seconds} —Å–µ–∫—É–Ω–¥")
            if "error" in exception_container:
                raise exception_container["error"]

            return result_container.get("result")

        return wrapper
    return decorator



@timeout(2)
def slow():
    time.sleep(3)
    return "–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å..."

@timeout(2)
def fast():
    time.sleep(1)
    return "–£—Å–ø–µ–ª–∏!"

print(fast())    # ‚úÖ –£—Å–ø–µ–ª–∏!
# print(slow())    # ‚ùå TimeoutError


# _____________________________________________________
print('-------------------------------------------------------')

request_token = "admin_secret"

def require_auth(token):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if token and token == request_token:
                return func(*args, **kwargs)
            else:
                print('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')

        return wrapper

    return decorator




@require_auth("admin_secret")
def delete_user():
    print("üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")

delete_user()


# _____________________________________________________
print('-------------------------------------------------------')


request_token = "admin"

def log_call(func):
    name = func.__name__

    @wraps(func)  # –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    def wrapper(*args, **kwargs):
        print(f'üîî –í—ã–∑–æ–≤: {name}')
        result = func(*args, **kwargs)
        print(f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {name}')
        return result

    return wrapper

def require_auth(token):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if token and token == request_token:
                return func(*args, **kwargs)
            else:
                print('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')

        return wrapper

    return decorator

@log_call
@require_auth("admin")
def delete_user():
    print("üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")

delete_user()

print('--------–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤------------------')


class LogCall:
    def __init__(self, func):
        wraps(func)(self)
        self.func = func

    def __call__(self, *args, **kwargs):
        print(f'üîî –í—ã–∑–æ–≤: {self.func.__name__}')
        result = self.func(*args, **kwargs)
        print(f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.func.__name__}')
        return result


log = LogCall

@log
def greet(name):
    print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")

greet("–ê–Ω—è")

print('--------–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏------------------')

class LogCall:
    def __init__(self, level="INFO"):
        self.level = level

    def __call__(self, func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            print(f"[{self.level}] üîî –í—ã–∑–æ–≤: {func.__name__}")
            result = func(*args, **kwargs)
            print(f"[{self.level}] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {func.__name__}")
            return result
        return wrapper


log = LogCall

@log('INFO')
def greet(name):
    print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")

greet("–ê–Ω—è")


print('--------–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏------------------')

def bar():
    print(1)

def decorator(errors):
    errors: list
    def func_wrapper(func):
        func: Callable

        @wraps(func)
        def wrapper(*args, **kwargs):
            for error in errors:
                try:
                    func()
                except error[0]:
                    error[1]()

            return

        return wrapper

    return func_wrapper

@decorator([(KeyError, bar), (IndexError, lambda _: print(2))])
def foo():
    if randint(1,2) == 1:
        raise KeyError("bar")
    else:
        raise IndexError
